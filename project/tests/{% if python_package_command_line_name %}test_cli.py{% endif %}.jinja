"""Tests for the CLI."""

from __future__ import annotations

import sys
import pytest

from {{ python_package_import_name }} import main, get_version


def test_main() -> None:
    """Basic CLI test."""
    assert main([]) == 0


def test_show_help(capsys: pytest.CaptureFixture) -> None:
    """Show help.

    Parameters:
        capsys: Pytest fixture to capture output.
    """
    with pytest.raises(SystemExit):
        main(["-h"])
    captured = capsys.readouterr()
    assert "{{ python_package_command_line_name }}" in captured.out


def test_show_version(mocker, capsys: pytest.CaptureFixture) -> None:
    """Show version.

    Parameters:
        mocker: pytest-mock fixture to patch get_version.
        capsys: Pytest fixture to capture output.
    """
    mocker.patch("{{ python_package_import_name }}.get_version", return_value="0.1.0")
    with pytest.raises(SystemExit):
        main(["-V"])
    captured = capsys.readouterr()
    assert "0.1.0" in captured.out


def test_main_module(mocker):
    """Test running the CLI via __main__ (python -m ...)."""
    import importlib

    module_name = "{{ python_package_import_name }}.__main__"
    # Simulate: python -m {{ python_package_import_name }} --version
    mocker.patch.object(sys, "argv", ["-m", "-V"])
    mocker.patch("builtins.print", lambda *a, **kw: None)
    class ExitCalled(Exception):
        pass
    mocker.patch.object(sys, "exit", side_effect=ExitCalled)
    try:
        importlib.import_module(module_name)
    except ExitCalled:
        pass


def test_get_version_package_not_found(mocker):
    """Test get_version returns 'unknown' if package is not found."""
    mocker.patch("importlib.metadata.version", side_effect=Exception("not found"))
    mocker.patch("importlib.metadata.PackageNotFoundError", Exception)
    assert get_version() == "unknown"
